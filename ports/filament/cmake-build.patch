diff --git a/CMakeLists.txt b/CMakeLists.txt
index a979145c0..2156163a8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -311,10 +311,6 @@ if (ANDROID)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Werror=unguarded-availability")
 endif()
 
-if (CYGWIN)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions -fno-rtti")
-endif()
-
 if (MSVC)
     # Since the "secure" replacements that MSVC suggests are not portable, disable
     # the deprecation warnings. Also disable warnings about use of POSIX functions (i.e. "unlink").
@@ -345,24 +341,6 @@ if (NOT MSVC AND NOT IOS)
     set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -ffunction-sections -fdata-sections")
 endif()
 
-# On Android RELEASE builds, we disable exceptions and RTTI to save some space (about 75 KiB
-# saved by -fno-exception and 10 KiB saved by -fno-rtti).
-if (ANDROID OR IOS OR WEBGL)
-    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fno-exceptions -fno-rtti")
-
-    if (ANDROID OR WEBGL)
-        # Omitting unwind info prevents the generation of readable stack traces in crash reports on iOS
-        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fno-unwind-tables -fno-asynchronous-unwind-tables")
-    endif()
-endif()
-
-# With WebGL, we disable RTTI even for debug builds because we pass emscripten::val back and forth
-# between C++ and JavaScript in order to efficiently access typed arrays, which are unbound.
-# NOTE: This is not documented in emscripten so we should consider a different approach.
-if (WEBGL)
-    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fno-rtti")
-endif()
-
 if (WEBGL_PTHREADS)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
 endif()
@@ -491,6 +469,7 @@ if (FILAMENT_SUPPORTS_VULKAN)
 endif()
 if (FILAMENT_SUPPORTS_METAL)
     set(MATC_API_FLAGS ${MATC_API_FLAGS} -a metal)
+    set(MATC_OPT_FLAGS -g) # material optimizations causes rendering artifacts on METAL
 endif()
 
 # Disable optimizations and enable debug info (preserves names in SPIR-V)
@@ -582,10 +561,15 @@ endfunction()
 # ==================================================================================================
 # Configuration for CMAKE_CROSSCOMPILING.
 # ==================================================================================================
-if (WEBGL)
-    set(IMPORT_EXECUTABLES ${FILAMENT}/${IMPORT_EXECUTABLES_DIR}/ImportExecutables-Release.cmake)
-else()
-    set(IMPORT_EXECUTABLES ${FILAMENT}/${IMPORT_EXECUTABLES_DIR}/ImportExecutables-${CMAKE_BUILD_TYPE}.cmake)
+
+if(CMAKE_CROSSCOMPILING)
+    message("configuring filament tools using host binaries")
+    foreach(NAME IN ITEMS matc resgen cmgen filamesh uberz mipgen glslminifier)
+        find_program(${NAME}_PATH ${NAME})
+        add_executable(${NAME} IMPORTED)
+        set_target_properties(${NAME} PROPERTIES IMPORTED_LOCATION ${${NAME}_PATH})
+        message("configured executable ${NAME} with path ${${NAME}_PATH}")
+    endforeach()
 endif()
 
 # ==================================================================================================
@@ -644,8 +628,6 @@ endfunction()
 # ==================================================================================================
 
 # Common to all platforms
-add_subdirectory(${EXTERNAL}/libgtest/tnt)
-add_subdirectory(${LIBRARIES}/camutils)
 add_subdirectory(${LIBRARIES}/filabridge)
 add_subdirectory(${LIBRARIES}/filaflat)
 add_subdirectory(${LIBRARIES}/filagui)
@@ -672,9 +654,7 @@ add_subdirectory(${EXTERNAL}/smol-v/tnt)
 add_subdirectory(${EXTERNAL}/benchmark/tnt)
 add_subdirectory(${EXTERNAL}/meshoptimizer/tnt)
 add_subdirectory(${EXTERNAL}/cgltf/tnt)
-add_subdirectory(${EXTERNAL}/draco/tnt)
 add_subdirectory(${EXTERNAL}/jsmn/tnt)
-add_subdirectory(${EXTERNAL}/stb/tnt)
 add_subdirectory(${EXTERNAL}/getopt)
 
 if (FILAMENT_BUILD_FILAMAT OR IS_HOST_PLATFORM)
@@ -698,11 +678,6 @@ endif()
 
 set(FILAMENT_SAMPLES_BINARY_DIR ${PROJECT_BINARY_DIR}/samples)
 
-if (WEBGL)
-    add_subdirectory(web/filament-js)
-    add_subdirectory(web/samples)
-endif()
-
 if (IS_HOST_PLATFORM)
     if (FILAMENT_SUPPORTS_OPENGL)
         add_subdirectory(${LIBRARIES}/bluegl)
@@ -714,10 +689,6 @@ if (IS_HOST_PLATFORM)
 
     add_subdirectory(${FILAMENT}/samples)
 
-    add_subdirectory(${EXTERNAL}/libassimp/tnt)
-    add_subdirectory(${EXTERNAL}/libpng/tnt)
-    add_subdirectory(${EXTERNAL}/libsdl2/tnt)
-    add_subdirectory(${EXTERNAL}/libz/tnt)
     add_subdirectory(${EXTERNAL}/tinyexr/tnt)
 
     add_subdirectory(${TOOLS}/cmgen)
@@ -735,7 +706,4 @@ if (IS_HOST_PLATFORM)
     add_subdirectory(${TOOLS}/uberz)
 endif()
 
-# Generate exported executables for cross-compiled builds (Android, WebGL, and iOS)
-if (NOT CMAKE_CROSSCOMPILING)
-    export(TARGETS matc cmgen filamesh mipgen resgen uberz glslminifier FILE ${IMPORT_EXECUTABLES})
-endif()
+install(EXPORT filamentTargets DESTINATION share/filament)
\ No newline at end of file
diff --git a/filament/CMakeLists.txt b/filament/CMakeLists.txt
index 31147660f..21410b3e8 100644
--- a/filament/CMakeLists.txt
+++ b/filament/CMakeLists.txt
@@ -288,10 +288,6 @@ add_definitions(
 # Generate all .filamat: default material, skyboxes, and post-process
 # ==================================================================================================
 
-if (CMAKE_CROSSCOMPILING)
-    include(${IMPORT_EXECUTABLES})
-endif()
-
 set(MATERIAL_BINS)
 file(MAKE_DIRECTORY ${MATERIAL_DIR})
 
@@ -524,7 +520,11 @@ include_directories(src)
 add_library(${TARGET} STATIC ${PRIVATE_HDRS} ${PUBLIC_HDRS} ${SRCS} ${DATA_BINS})
 
 # specify where the public headers of this library are
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET}
+PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include>
+)
 
 # add this subproject to the Filament folder
 set_target_properties(${TARGET} PROPERTIES FOLDER Filament)
@@ -606,7 +606,7 @@ target_link_libraries(${TARGET} PRIVATE
 # Installation
 # ==================================================================================================
 set(INSTALL_TYPE ARCHIVE)
-install(TARGETS ${TARGET} ${INSTALL_TYPE} DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} EXPORT filamentTargets ${INSTALL_TYPE} DESTINATION lib)
 install(DIRECTORY ${PUBLIC_HDR_DIR}/filament DESTINATION include)
 install(FILES "README.md" DESTINATION .)
 install(FILES "../LICENSE" DESTINATION .)
diff --git a/filament/backend/CMakeLists.txt b/filament/backend/CMakeLists.txt
index 624e41ba7..1d61ff441 100644
--- a/filament/backend/CMakeLists.txt
+++ b/filament/backend/CMakeLists.txt
@@ -220,7 +220,10 @@ include_directories(${GENERATION_ROOT})
 add_library(${TARGET} STATIC ${PRIVATE_HDRS} ${PUBLIC_HDRS} ${SRCS})
 
 # specify where the public headers of this library are
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 
 # add this subproject to the Filament folder
 set_target_properties(${TARGET} PROPERTIES FOLDER Filament)
@@ -230,7 +233,10 @@ set_target_properties(${TARGET} PROPERTIES FOLDER Filament)
 # ==================================================================================================
 
 add_library(${TARGET}_headers INTERFACE)
-target_include_directories(${TARGET}_headers INTERFACE ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET}_headers INTERFACE
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 
 # ==================================================================================================
 # Build SPIRV snippets used by the Vulkan backend.
@@ -374,14 +380,15 @@ target_link_libraries(${TARGET} PRIVATE
 # Installation
 # ==================================================================================================
 set(INSTALL_TYPE ARCHIVE)
-install(TARGETS ${TARGET} ${INSTALL_TYPE} DESTINATION lib/${DIST_DIR})
-install(TARGETS vkshaders ${INSTALL_TYPE} DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} ${TARGET}_headers EXPORT filamentTargets ${INSTALL_TYPE} DESTINATION lib)
+install(TARGETS vkshaders ${INSTALL_TYPE} DESTINATION lib)
 install(DIRECTORY ${PUBLIC_HDR_DIR}/backend DESTINATION include)
 
 # ==================================================================================================
 # Test
 # ==================================================================================================
 option(INSTALL_BACKEND_TEST "Install the backend test library so it can be consumed on iOS" OFF)
+find_package(GTest CONFIG REQUIRED)
 
 if (APPLE)
     add_library(backend_test STATIC
@@ -404,7 +411,7 @@ if (APPLE)
     target_link_libraries(backend_test PRIVATE
         backend
         getopt
-        gtest
+        GTest::gtest
         filamat
         SPIRV
         spirv-cross-glsl)
@@ -417,7 +424,7 @@ if (APPLE)
             SPIRV-Tools-opt
             backend_test
             getopt
-            gtest
+            GTest::gtest
             glslang
             spirv-cross-core
             spirv-cross-glsl
@@ -435,7 +442,7 @@ if (APPLE)
     set(BACKEND_TEST_LIB_NAME ${CMAKE_STATIC_LIBRARY_PREFIX}backend_test${CMAKE_STATIC_LIBRARY_SUFFIX})
 
     if (INSTALL_BACKEND_TEST)
-        install(FILES "${BACKEND_TEST_COMBINED_OUTPUT}" DESTINATION lib/${DIST_DIR} RENAME ${BACKEND_TEST_LIB_NAME})
+        install(FILES "${BACKEND_TEST_COMBINED_OUTPUT}" DESTINATION lib RENAME ${BACKEND_TEST_LIB_NAME})
         install(FILES test/PlatformRunner.h DESTINATION include/backend_test)
     endif()
 
@@ -465,7 +472,7 @@ add_executable(compute_test
 target_link_libraries(compute_test PRIVATE
         backend
         getopt
-        gtest
+        GTest::gtest
         )
 
 set_target_properties(compute_test PROPERTIES FOLDER Tests)
diff --git a/filament/test/CMakeLists.txt b/filament/test/CMakeLists.txt
index f9aedc546..c23449b91 100644
--- a/filament/test/CMakeLists.txt
+++ b/filament/test/CMakeLists.txt
@@ -38,6 +38,8 @@ list(APPEND RESGEN_SOURCE ${DUMMY_SRC})
 # Unit tests
 # ==================================================================================================
 
+find_package(GTest CONFIG REQUIRED)
+
 # The following tests rely on private APIs that are stripped
 # away in Release builds
 if (TNT_DEV)
@@ -48,7 +50,7 @@ if (TNT_DEV)
             filament_framegraph_test.cpp
             filament_test.cpp)
 
-    target_link_libraries(test_${TARGET} PRIVATE filament gtest)
+    target_link_libraries(test_${TARGET} PRIVATE filament GTest::gtest)
     target_compile_options(test_${TARGET} PRIVATE ${COMPILER_FLAGS})
     set_target_properties(test_${TARGET} PROPERTIES FOLDER Tests)
 
@@ -59,7 +61,7 @@ endif()
 add_executable(test_material_parser
         filament_test_material_parser.cpp
         ${RESGEN_SOURCE})
-target_link_libraries(test_material_parser PRIVATE filament gtest)
+target_link_libraries(test_material_parser PRIVATE filament GTest::gtest)
 target_compile_options(test_material_parser PRIVATE ${COMPILER_FLAGS})
 target_include_directories(test_material_parser PRIVATE ${RESOURCE_DIR})
 set_target_properties(test_material_parser PROPERTIES FOLDER Tests)
diff --git a/libs/bluegl/CMakeLists.txt b/libs/bluegl/CMakeLists.txt
index 3d8b6b63f..217177d6d 100644
--- a/libs/bluegl/CMakeLists.txt
+++ b/libs/bluegl/CMakeLists.txt
@@ -61,6 +61,7 @@ if (LINUX)
 endif()
 
 # and we're linking against the libraries below, importing their public headers
+find_package(GTest CONFIG REQUIRED)
 target_link_libraries(test_${TARGET} LINK_PUBLIC ${TARGET})
-target_link_libraries(test_${TARGET} LINK_PUBLIC gtest)
+target_link_libraries(test_${TARGET} LINK_PUBLIC GTest::gtest)
 set_target_properties(test_${TARGET} PROPERTIES FOLDER Tests)
diff --git a/libs/camutils/CMakeLists.txt b/libs/camutils/CMakeLists.txt
index 60a67fbaf..4ec69247f 100644
--- a/libs/camutils/CMakeLists.txt
+++ b/libs/camutils/CMakeLists.txt
@@ -53,7 +53,8 @@ install(DIRECTORY ${PUBLIC_HDR_DIR}/camutils DESTINATION include)
 # Tests
 # ==================================================================================================
 if (NOT ANDROID AND NOT WEBGL AND NOT IOS)
+    find_package(GTest CONFIG REQUIRED)
     add_executable(test_${TARGET} tests/test_camutils.cpp)
-    target_link_libraries(test_${TARGET} PRIVATE camutils gtest)
+    target_link_libraries(test_${TARGET} PRIVATE camutils GTest::gtest)
     set_target_properties(test_${TARGET} PROPERTIES FOLDER Tests)
 endif()
diff --git a/libs/filabridge/CMakeLists.txt b/libs/filabridge/CMakeLists.txt
index ffcd1ce23..f0e72da06 100644
--- a/libs/filabridge/CMakeLists.txt
+++ b/libs/filabridge/CMakeLists.txt
@@ -18,10 +18,11 @@ set(SRCS
 # ==================================================================================================
 # Include and target definitions
 # ==================================================================================================
-include_directories(${PUBLIC_HDR_DIR})
-
 add_library(${TARGET} STATIC ${PUBLIC_HDRS} ${SRCS})
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER Libs)
 
 target_link_libraries(${TARGET} utils)
@@ -32,4 +33,4 @@ target_link_libraries(${TARGET} backend_headers)
 # Installation
 # ==================================================================================================
 install(DIRECTORY ${PUBLIC_HDR_DIR}/filament DESTINATION include)
-install(TARGETS ${TARGET} ARCHIVE DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
diff --git a/libs/filaflat/CMakeLists.txt b/libs/filaflat/CMakeLists.txt
index 0ebf53e06..6f53ea601 100644
--- a/libs/filaflat/CMakeLists.txt
+++ b/libs/filaflat/CMakeLists.txt
@@ -18,10 +18,11 @@ set(SRCS
 # ==================================================================================================
 # Include and target definitions
 # ==================================================================================================
-include_directories(${PUBLIC_HDR_DIR})
-
 add_library(${TARGET} ${HDRS} ${SRCS})
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER Libs)
 
 target_link_libraries(${TARGET} filabridge utils)
@@ -35,4 +36,4 @@ endif()
 # ==================================================================================================
 # We do not need filaflat headers in the install directory
 # install(DIRECTORY ${PUBLIC_HDR_DIR}/filaflat DESTINATION include)
-install(TARGETS ${TARGET} ARCHIVE DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
diff --git a/libs/filagui/CMakeLists.txt b/libs/filagui/CMakeLists.txt
index 8e63b0ee5..3d8c4e080 100644
--- a/libs/filagui/CMakeLists.txt
+++ b/libs/filagui/CMakeLists.txt
@@ -26,10 +26,6 @@ set(SRCS
 # Compile material files (mat) into headers (inc)
 # ==================================================================================================
 
-if (CMAKE_CROSSCOMPILING)
-    include(${IMPORT_EXECUTABLES})
-endif()
-
 set(MATERIAL_SRCS
         src/materials/uiBlit.mat)
 
@@ -82,7 +78,10 @@ add_library(${TARGET} STATIC ${PUBLIC_HDRS} ${SRCS} ${RESGEN_SOURCE})
 
 target_link_libraries(${TARGET} PUBLIC imgui filament)
 
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER Libs)
 
 # ==================================================================================================
@@ -94,3 +93,9 @@ if (NOT MSVC)
             $<$<CONFIG:Release>:-ffast-math>
     )
 endif()
+
+# ==================================================================================================
+# Installation
+# ==================================================================================================
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
+install(DIRECTORY ${PUBLIC_HDR_DIR}/filagui DESTINATION include)
diff --git a/libs/filamat/CMakeLists.txt b/libs/filamat/CMakeLists.txt
index d4be03fa7..6d0fc2b11 100644
--- a/libs/filamat/CMakeLists.txt
+++ b/libs/filamat/CMakeLists.txt
@@ -98,7 +98,10 @@ target_link_libraries(${TARGET} shaders filabridge utils smol-v)
 
 # Filamat Lite
 add_library(filamat_lite STATIC ${HDRS} ${LITE_PRIVATE_HDRS} ${LITE_SRCS})
-target_include_directories(filamat_lite PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(filamat_lite PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(filamat_lite PROPERTIES FOLDER Libs)
 target_link_libraries(filamat_lite shaders filabridge utils)
 
@@ -153,14 +156,16 @@ set(FILAMAT_COMBINED_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/libfilamat_combined.a")
 combine_static_libs(filamat "${FILAMAT_COMBINED_OUTPUT}" "${FILAMAT_DEPS}")
 
 set(FILAMAT_LIB_NAME ${CMAKE_STATIC_LIBRARY_PREFIX}filamat${CMAKE_STATIC_LIBRARY_SUFFIX})
-install(FILES "${FILAMAT_COMBINED_OUTPUT}" DESTINATION lib/${DIST_DIR} RENAME ${FILAMAT_LIB_NAME})
+install(FILES "${FILAMAT_COMBINED_OUTPUT}" DESTINATION lib RENAME ${FILAMAT_LIB_NAME})
 install(DIRECTORY ${PUBLIC_HDR_DIR}/filamat DESTINATION include)
 
-install(TARGETS filamat_lite ARCHIVE DESTINATION lib/${DIST_DIR})
+install(TARGETS filamat_lite EXPORT filamentTargets ARCHIVE DESTINATION lib)
 
 # ==================================================================================================
 # Tests
 # ==================================================================================================
+find_package(GTest CONFIG REQUIRED)
+
 project(test_filamat)
 set(TARGET test_filamat)
 set(SRCS
@@ -172,7 +177,7 @@ add_executable(${TARGET} ${SRCS})
 
 target_include_directories(${TARGET} PRIVATE src)
 
-target_link_libraries(${TARGET} filamat gtest)
+target_link_libraries(${TARGET} filamat GTest::gtest)
 
 set_target_properties(${TARGET} PROPERTIES FOLDER Tests)
 
@@ -184,6 +189,6 @@ add_executable(${TARGET} ${SRCS})
 
 target_include_directories(${TARGET} PRIVATE src)
 
-target_link_libraries(${TARGET} filamat_lite gtest)
+target_link_libraries(${TARGET} filamat_lite GTest::gtest)
 
 set_target_properties(${TARGET} PROPERTIES FOLDER Tests)
diff --git a/libs/filamentapp/CMakeLists.txt b/libs/filamentapp/CMakeLists.txt
index 5d391d884..5aafcfacf 100644
--- a/libs/filamentapp/CMakeLists.txt
+++ b/libs/filamentapp/CMakeLists.txt
@@ -80,10 +80,6 @@ endif()
 # Compile resources
 # ==================================================================================================
 
-if (CMAKE_CROSSCOMPILING)
-    include(${IMPORT_EXECUTABLES})
-endif()
-
 file(MAKE_DIRECTORY ${MATERIAL_DIR})
 file(MAKE_DIRECTORY ${RESOURCE_DIR})
 
diff --git a/libs/filameshio/CMakeLists.txt b/libs/filameshio/CMakeLists.txt
index eab319211..a3ad91fc6 100644
--- a/libs/filameshio/CMakeLists.txt
+++ b/libs/filameshio/CMakeLists.txt
@@ -31,14 +31,15 @@ target_link_libraries(${TARGET}
 # Installation
 # ==================================================================================================
 set(INSTALL_TYPE ARCHIVE)
-install(TARGETS ${TARGET} ${INSTALL_TYPE} DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} ${INSTALL_TYPE} DESTINATION lib)
 install(FILES ${DIST_HDRS} DESTINATION include/${TARGET})
 
 # ==================================================================================================
 # Tests
 # ==================================================================================================
 if (NOT IOS AND NOT WEBGL AND NOT ANDROID)
+    find_package(GTest CONFIG REQUIRED)
     add_executable(test_${TARGET} tests/test_filamesh.cpp )
-    target_link_libraries(test_${TARGET} PRIVATE filameshio gtest)
+    target_link_libraries(test_${TARGET} PRIVATE filameshio GTest::gtest)
     set_target_properties(test_${TARGET} PROPERTIES FOLDER Tests)
 endif()
diff --git a/libs/geometry/CMakeLists.txt b/libs/geometry/CMakeLists.txt
index 5c46eb606..e6fedafc5 100644
--- a/libs/geometry/CMakeLists.txt
+++ b/libs/geometry/CMakeLists.txt
@@ -26,7 +26,10 @@ add_library(${TARGET} STATIC ${PUBLIC_HDRS} ${SRCS})
 
 target_link_libraries(${TARGET} PUBLIC math utils)
 
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER Libs)
 
 # ==================================================================================================
@@ -42,14 +45,15 @@ endif()
 # ==================================================================================================
 # Installation
 # ==================================================================================================
-install(TARGETS ${TARGET} ARCHIVE DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
 install(DIRECTORY ${PUBLIC_HDR_DIR}/geometry DESTINATION include)
 
 # ==================================================================================================
 # Tests
 # ==================================================================================================
 if (NOT ANDROID AND NOT WEBGL AND NOT IOS)
+    find_package(GTest CONFIG REQUIRED)
     add_executable(test_transcoder tests/test_transcoder.cpp)
-    target_link_libraries(test_transcoder PRIVATE ${TARGET} gtest)
+    target_link_libraries(test_transcoder PRIVATE ${TARGET} GTest::gtest)
     set_target_properties(test_transcoder PROPERTIES FOLDER Tests)
 endif()
diff --git a/libs/gltfio/CMakeLists.txt b/libs/gltfio/CMakeLists.txt
index 70a790e46..0a25748f3 100644
--- a/libs/gltfio/CMakeLists.txt
+++ b/libs/gltfio/CMakeLists.txt
@@ -53,10 +53,6 @@ set(SRCS
 
 set(RESOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR})
 
-if (CMAKE_CROSSCOMPILING)
-    include(${IMPORT_EXECUTABLES})
-endif()
-
 set(DOUBLESIDED false)
 set(TRANSPARENCY default)
 
@@ -145,23 +141,32 @@ set(DUMMY_SRC "${RESOURCE_DIR}/dummy.c")
 add_custom_command(OUTPUT ${DUMMY_SRC} COMMAND echo "//" > ${DUMMY_SRC})
 
 add_library(uberarchive ${DUMMY_SRC} ${RESGEN_SOURCE})
-target_include_directories(uberarchive PUBLIC ${RESOURCE_DIR})
+target_include_directories(uberarchive PUBLIC
+    $<BUILD_INTERFACE:${RESOURCE_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(uberarchive PROPERTIES FOLDER Libs)
 
 # ==================================================================================================
 # Build the "core" library (no filamat)
 # ==================================================================================================
 
+find_package(stb CONFIG REQUIRED)
+find_package(draco CONFIG REQUIRED)
+
 include_directories(${PUBLIC_HDR_DIR} ${RESOURCE_DIR})
-link_libraries(math utils filament cgltf stb ktxreader geometry tsl trie uberzlib)
 
 add_library(gltfio_core STATIC ${PUBLIC_HDRS} ${SRCS})
 
-target_include_directories(gltfio_core PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(gltfio_core PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(gltfio_core PROPERTIES FOLDER Libs)
 
 target_compile_definitions(gltfio_core PUBLIC -DGLTFIO_DRACO_SUPPORTED=1)
-target_link_libraries(gltfio_core PUBLIC dracodec meshoptimizer)
+target_link_libraries(gltfio_core PUBLIC math filament cgltf draco::draco meshoptimizer utils)
+target_link_libraries(gltfio_core PRIVATE stb ktxreader geometry trie uberzlib)
 
 if (WEBGL_PTHREADS)
     target_compile_definitions(gltfio_core PUBLIC -DFILAMENT_WASM_THREADS)
@@ -174,7 +179,10 @@ if (NOT WEBGL AND NOT ANDROID AND NOT IOS)
     # ==================================================================================================
     add_library(${TARGET} STATIC ${PUBLIC_HDRS} src/JitShaderProvider.cpp)
     target_link_libraries(${TARGET} PUBLIC filamat gltfio_core)
-    target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+    target_include_directories(${TARGET} PUBLIC
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+        $<INSTALL_INTERFACE:include>
+    )
     set_target_properties(${TARGET} PROPERTIES FOLDER Libs)
 
     # ==================================================================================================
@@ -187,7 +195,7 @@ if (NOT WEBGL AND NOT ANDROID AND NOT IOS)
         target_compile_options(${TARGET} PRIVATE -Wno-deprecated-register)
     endif()
 
-    install(TARGETS ${TARGET} ARCHIVE DESTINATION lib/${DIST_DIR})
+    install(TARGETS ${TARGET} ARCHIVE DESTINATION lib)
 
 endif()
 
@@ -195,6 +203,6 @@ endif()
 # Installation
 # ==================================================================================================
 
-install(TARGETS gltfio_core uberarchive ARCHIVE DESTINATION lib/${DIST_DIR})
+install(TARGETS gltfio_core uberarchive EXPORT filamentTargets ARCHIVE DESTINATION lib)
 install(DIRECTORY ${PUBLIC_HDR_DIR}/gltfio DESTINATION include)
 install(FILES ${RESOURCE_DIR}/materials/uberarchive.h DESTINATION include/gltfio/materials)
diff --git a/libs/ibl/CMakeLists.txt b/libs/ibl/CMakeLists.txt
index 23b1937cc..234a6ccf8 100644
--- a/libs/ibl/CMakeLists.txt
+++ b/libs/ibl/CMakeLists.txt
@@ -34,13 +34,19 @@ set(SRCS
 include_directories(${PUBLIC_HDR_DIR})
 
 add_library(${TARGET} ${PUBLIC_HDRS} ${PRIVATE_HDRS} ${SRCS})
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER Libs)
 target_link_libraries(${TARGET} math utils)
 
 add_library(${TARGET}-lite ${PUBLIC_HDRS} ${PRIVATE_HDRS} ${SRCS})
 target_compile_definitions(${TARGET}-lite PUBLIC -DFILAMENT_IBL_LITE=1)
-target_include_directories(${TARGET}-lite PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET}-lite PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET}-lite PROPERTIES FOLDER Libs)
 target_link_libraries(${TARGET}-lite math utils)
 
@@ -59,6 +65,6 @@ endif()
 # ==================================================================================================
 # Installation
 # ==================================================================================================
-install(TARGETS ${TARGET} ARCHIVE DESTINATION lib/${DIST_DIR})
-install(TARGETS ${TARGET}-lite ARCHIVE DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
+install(TARGETS ${TARGET}-lite EXPORT filamentTargets ARCHIVE DESTINATION lib)
 install(DIRECTORY ${PUBLIC_HDR_DIR}/ibl DESTINATION include)
diff --git a/libs/iblprefilter/CMakeLists.txt b/libs/iblprefilter/CMakeLists.txt
index e39212e43..3c98e0f12 100644
--- a/libs/iblprefilter/CMakeLists.txt
+++ b/libs/iblprefilter/CMakeLists.txt
@@ -42,10 +42,6 @@ add_definitions(-DSYSTRACE_TAG=2 )
 # Generate all .filamat: default material, skyboxes, and post-process
 # ==================================================================================================
 
-if (CMAKE_CROSSCOMPILING)
-    include(${IMPORT_EXECUTABLES})
-endif()
-
 set(MATERIAL_BINS)
 file(MAKE_DIRECTORY ${MATERIAL_DIR})
 
@@ -133,5 +129,5 @@ target_link_libraries(${TARGET} PRIVATE
 # Installation
 # ==================================================================================================
 set(INSTALL_TYPE ARCHIVE)
-install(TARGETS ${TARGET} ${INSTALL_TYPE} DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} ${INSTALL_TYPE} DESTINATION lib)
 install(DIRECTORY ${PUBLIC_HDR_DIR}/filament-iblprefilter DESTINATION include)
diff --git a/libs/image/CMakeLists.txt b/libs/image/CMakeLists.txt
index 2d76ca148..7644e5eb1 100644
--- a/libs/image/CMakeLists.txt
+++ b/libs/image/CMakeLists.txt
@@ -31,7 +31,10 @@ add_library(${TARGET} STATIC ${PUBLIC_HDRS} ${SRCS})
 
 target_link_libraries(${TARGET} PUBLIC math utils)
 
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER Libs)
 
 # ==================================================================================================
@@ -47,14 +50,15 @@ endif()
 # ==================================================================================================
 # Installation
 # ==================================================================================================
-install(TARGETS ${TARGET} ARCHIVE DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
 install(DIRECTORY ${PUBLIC_HDR_DIR}/image DESTINATION include)
 
 # ==================================================================================================
 # Tests
 # ==================================================================================================
 if (NOT ANDROID AND NOT WEBGL AND NOT IOS AND NOT FILAMENT_SKIP_SDL2)
+    find_package(GTest CONFIG REQUIRED)
     add_executable(test_${TARGET} tests/test_image.cpp)
-    target_link_libraries(test_${TARGET} PRIVATE image imageio gtest)
+    target_link_libraries(test_${TARGET} PRIVATE image imageio GTest::gtest)
     set_target_properties(test_${TARGET} PROPERTIES FOLDER Tests)
 endif()
diff --git a/libs/imageio/CMakeLists.txt b/libs/imageio/CMakeLists.txt
index 1971e7ffb..ac0395aa5 100644
--- a/libs/imageio/CMakeLists.txt
+++ b/libs/imageio/CMakeLists.txt
@@ -33,7 +33,10 @@ add_library(${TARGET} STATIC ${PUBLIC_HDRS} ${SRCS})
 target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
 set_target_properties(${TARGET} PROPERTIES FOLDER Libs)
 
-target_link_libraries(${TARGET} PUBLIC image math png tinyexr utils z basis_encoder)
+find_package(PNG REQUIRED)
+include_directories(${PNG_INCLUDE_DIR})
+
+target_link_libraries(${TARGET} PUBLIC image math ${PNG_LIBRARIES} tinyexr utils z basis_encoder)
 if (WIN32)
     target_link_libraries(${TARGET} PRIVATE wsock32)
 endif()
diff --git a/libs/ktxreader/CMakeLists.txt b/libs/ktxreader/CMakeLists.txt
index d5da5332a..9da52345f 100644
--- a/libs/ktxreader/CMakeLists.txt
+++ b/libs/ktxreader/CMakeLists.txt
@@ -26,7 +26,10 @@ add_library(${TARGET} STATIC ${PUBLIC_HDRS} ${SRCS})
 
 target_link_libraries(${TARGET} PUBLIC utils image filament basis_transcoder)
 
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER Libs)
 
 # ==================================================================================================
@@ -42,7 +45,7 @@ endif()
 # ==================================================================================================
 # Installation
 # ==================================================================================================
-install(TARGETS ${TARGET} ARCHIVE DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
 install(DIRECTORY ${PUBLIC_HDR_DIR}/${TARGET} DESTINATION include)
 
 # ==================================================================================================
@@ -63,7 +66,8 @@ add_testfile(color_grid_uastc_zstd.ktx2)
 add_testfile(lightroom_ibl.ktx)
 
 if (NOT ANDROID AND NOT WEBGL AND NOT IOS)
+    find_package(GTest CONFIG REQUIRED)
     add_executable(test_ktxreader tests/test_ktxreader.cpp ${TESTFILES})
-    target_link_libraries(test_ktxreader PRIVATE ${TARGET} gtest)
+    target_link_libraries(test_ktxreader PRIVATE ${TARGET} GTest::gtest)
     set_target_properties(test_ktxreader PROPERTIES FOLDER Tests)
 endif()
diff --git a/libs/matdbg/CMakeLists.txt b/libs/matdbg/CMakeLists.txt
index 071c5e9da..76b932bdb 100644
--- a/libs/matdbg/CMakeLists.txt
+++ b/libs/matdbg/CMakeLists.txt
@@ -4,10 +4,6 @@ project(matdbg C ASM)
 set(TARGET matdbg)
 set(PUBLIC_HDR_DIR include)
 
-if (CMAKE_CROSSCOMPILING)
-    include(${IMPORT_EXECUTABLES})
-endif()
-
 # ==================================================================================================
 # Sources and headers
 # ==================================================================================================
@@ -121,6 +117,6 @@ set(MATDBG_COMBINED_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/libmatdbg_combined.a")
 combine_static_libs(matdbg "${MATDBG_COMBINED_OUTPUT}" "${MATDBG_DEPS}")
 
 set(MATDBG_LIB_NAME ${CMAKE_STATIC_LIBRARY_PREFIX}matdbg${CMAKE_STATIC_LIBRARY_SUFFIX})
-install(FILES "${MATDBG_COMBINED_OUTPUT}" DESTINATION lib/${DIST_DIR} RENAME ${MATDBG_LIB_NAME})
+install(FILES "${MATDBG_COMBINED_OUTPUT}" DESTINATION lib RENAME ${MATDBG_LIB_NAME})
 # We do not need matdbg headers in the install directory
 # install(DIRECTORY ${PUBLIC_HDR_DIR}/matdbg DESTINATION include)
diff --git a/libs/math/CMakeLists.txt b/libs/math/CMakeLists.txt
index d7dab9108..e99a2e2ec 100644
--- a/libs/math/CMakeLists.txt
+++ b/libs/math/CMakeLists.txt
@@ -41,17 +41,28 @@ include_directories(${PUBLIC_HDR_DIR})
 
 add_library(${TARGET} STATIC ${PUBLIC_HDRS} ${SRCS})
 target_compile_options(${TARGET} PRIVATE ${OPTIMIZATION_FLAGS})
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER Libs)
 
 # ==================================================================================================
 # Installation
 # ==================================================================================================
+install(TARGETS ${TARGET}
+    EXPORT filamentTargets
+    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+)
 install(DIRECTORY ${PUBLIC_HDR_DIR}/math DESTINATION include)
 
 # ==================================================================================================
 # Tests
 # ==================================================================================================
+find_package(GTest CONFIG REQUIRED)
 add_executable(test_${TARGET}
         tests/test_fast.cpp
         tests/test_half.cpp
@@ -59,7 +70,7 @@ add_executable(test_${TARGET}
         tests/test_vec.cpp
         tests/test_quat.cpp
 )
-target_link_libraries(test_${TARGET} PRIVATE math gtest)
+target_link_libraries(test_${TARGET} PRIVATE math GTest::gtest)
 set_target_properties(test_${TARGET} PROPERTIES FOLDER Tests)
 
 # ==================================================================================================
diff --git a/libs/uberz/CMakeLists.txt b/libs/uberz/CMakeLists.txt
index 47744e225..2caf95d2c 100644
--- a/libs/uberz/CMakeLists.txt
+++ b/libs/uberz/CMakeLists.txt
@@ -27,7 +27,10 @@ add_library(${TARGET} STATIC ${PUBLIC_HDRS} ${SRCS})
 
 target_link_libraries(${TARGET} PUBLIC math utils filabridge zstd)
 
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER Libs)
 
 # ==================================================================================================
@@ -43,5 +46,5 @@ endif()
 # ==================================================================================================
 # Installation
 # ==================================================================================================
-install(TARGETS ${TARGET} ARCHIVE DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
 install(DIRECTORY ${PUBLIC_HDR_DIR}/uberz DESTINATION include)
diff --git a/libs/utils/CMakeLists.txt b/libs/utils/CMakeLists.txt
index 906f7441d..ef739871d 100644
--- a/libs/utils/CMakeLists.txt
+++ b/libs/utils/CMakeLists.txt
@@ -96,7 +96,10 @@ endif()
 include_directories(${PUBLIC_HDR_DIR})
 
 add_library(${TARGET} STATIC ${PUBLIC_HDRS} ${SRCS})
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER Libs)
 target_link_libraries(${TARGET} PUBLIC tsl)
 
@@ -122,7 +125,7 @@ endif()
 # Installation
 # ==================================================================================================
 set(INSTALL_TYPE ARCHIVE)
-install(TARGETS ${TARGET} ${INSTALL_TYPE} DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} EXPORT filamentTargets ${INSTALL_TYPE} DESTINATION lib)
 install(FILES ${DIST_HDRS} DESTINATION include/${TARGET})
 if (ANDROID)
     install(FILES ${DIST_ANDROID_HDRS} DESTINATION include/${TARGET_LINUX})
@@ -133,6 +136,7 @@ endif()
 # ==================================================================================================
 # Test executables
 # ==================================================================================================
+find_package(GTest CONFIG REQUIRED)
 
 set(TEST_SRCS
         test/test_algorithm.cpp
@@ -170,7 +174,7 @@ endif()
 
 add_executable(test_${TARGET} ${TEST_SRCS})
 
-target_link_libraries(test_${TARGET} PRIVATE gtest utils tsl math)
+target_link_libraries(test_${TARGET} PRIVATE GTest::gtest utils tsl math)
 set_target_properties(test_${TARGET} PROPERTIES FOLDER Tests)
 
 # ==================================================================================================
diff --git a/libs/viewer/CMakeLists.txt b/libs/viewer/CMakeLists.txt
index 621bb2498..0816ba9b4 100644
--- a/libs/viewer/CMakeLists.txt
+++ b/libs/viewer/CMakeLists.txt
@@ -54,7 +54,8 @@ install(DIRECTORY ${PUBLIC_HDR_DIR}/viewer DESTINATION include)
 # Tests
 # ==================================================================================================
 if (NOT ANDROID AND NOT WEBGL AND NOT IOS)
+    find_package(GTest CONFIG REQUIRED)
     add_executable(test_settings tests/test_settings.cpp)
-    target_link_libraries(test_settings PRIVATE ${TARGET} gtest)
+    target_link_libraries(test_settings PRIVATE ${TARGET} GTest::gtest)
     set_target_properties(test_settings PROPERTIES FOLDER Tests)
 endif()
diff --git a/samples/CMakeLists.txt b/samples/CMakeLists.txt
index e365ec96c..d6700ae16 100644
--- a/samples/CMakeLists.txt
+++ b/samples/CMakeLists.txt
@@ -41,10 +41,6 @@ set(MATERIAL_SRCS
         materials/texturedLit.mat
 )
 
-if (CMAKE_CROSSCOMPILING)
-    include(${IMPORT_EXECUTABLES})
-endif()
-
 file(MAKE_DIRECTORY ${MATERIAL_DIR})
 
 foreach (mat_src ${MATERIAL_SRCS})
diff --git a/shaders/CMakeLists.txt b/shaders/CMakeLists.txt
index 64e39e33c..c07890991 100644
--- a/shaders/CMakeLists.txt
+++ b/shaders/CMakeLists.txt
@@ -3,10 +3,6 @@ project(shaders C ASM)
 
 set(TARGET shaders)
 
-if (CMAKE_CROSSCOMPILING)
-    include(${IMPORT_EXECUTABLES})
-endif()
-
 # ==================================================================================================
 # Sources and headers
 # ==================================================================================================
@@ -110,11 +106,14 @@ endif()
 # Include and target definitions
 # ==================================================================================================
 add_library(${TARGET} STATIC ${RESGEN_SOURCE})
-target_include_directories(${TARGET} PUBLIC ${CMAKE_CURRENT_BINARY_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER Filament/Shaders)
 
 # ==================================================================================================
 # Installation
 # ==================================================================================================
 
-install(TARGETS ${TARGET} ARCHIVE DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
diff --git a/third_party/basisu/tnt/CMakeLists.txt b/third_party/basisu/tnt/CMakeLists.txt
index 59daa5407..21d78ac4f 100644
--- a/third_party/basisu/tnt/CMakeLists.txt
+++ b/third_party/basisu/tnt/CMakeLists.txt
@@ -57,9 +57,18 @@ add_library(basis_transcoder ${TRANSCODER_SRC})
 target_link_libraries(basis_transcoder zstd)
 target_link_libraries(basis_encoder basis_transcoder)
 
-target_include_directories(zstd PUBLIC ../zstd)
-target_include_directories(basis_encoder PUBLIC ../encoder)
-target_include_directories(basis_transcoder PUBLIC ../transcoder)
+target_include_directories(zstd PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../zstd>
+    $<INSTALL_INTERFACE:include>
+ )
+target_include_directories(basis_encoder PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../encoder>
+    $<INSTALL_INTERFACE:include>
+)
+target_include_directories(basis_transcoder PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../transcoder>
+    $<INSTALL_INTERFACE:include>
+)
 
 target_compile_definitions(basis_encoder PRIVATE ${BASIS_CONFIG})
 target_compile_definitions(basis_transcoder PRIVATE ${BASIS_CONFIG})
@@ -80,5 +89,5 @@ if (IS_HOST_PLATFORM)
     endif()
 endif()
 
-install(TARGETS basis_transcoder ARCHIVE DESTINATION lib/${DIST_DIR})
-install(TARGETS zstd ARCHIVE DESTINATION lib/${DIST_DIR})
+install(TARGETS basis_transcoder EXPORT filamentTargets ARCHIVE DESTINATION lib)
+install(TARGETS zstd EXPORT filamentTargets ARCHIVE DESTINATION lib)
diff --git a/third_party/cgltf/tnt/CMakeLists.txt b/third_party/cgltf/tnt/CMakeLists.txt
index db9e2338d..e996a7a79 100644
--- a/third_party/cgltf/tnt/CMakeLists.txt
+++ b/third_party/cgltf/tnt/CMakeLists.txt
@@ -9,11 +9,12 @@ set(PUBLIC_HDRS
     ${PUBLIC_HDR_DIR}/cgltf_write.h
     ${PUBLIC_HDR_DIR}/cgltf.h)
 
-include_directories(${PUBLIC_HDR_DIR})
-
 add_compile_definitions($<$<CONFIG:Debug>:CGLTF_VALIDATE_ENABLE_ASSERTS=1>)
 
 add_library(${TARGET} INTERFACE)
-target_sources(${TARGET} INTERFACE ${PUBLIC_HDRS})
-target_include_directories(${TARGET} INTERFACE ${PUBLIC_HDR_DIR})
-set_target_properties(${TARGET} PROPERTIES FOLDER ThirdParty)
\ No newline at end of file
+target_include_directories(${TARGET} INTERFACE
+    $<BUILD_INTERFACE:${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
+set_target_properties(${TARGET} PROPERTIES FOLDER ThirdParty)
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
\ No newline at end of file
diff --git a/third_party/civetweb/tnt/CMakeLists.txt b/third_party/civetweb/tnt/CMakeLists.txt
index 074c8c1fe..7eb3009db 100644
--- a/third_party/civetweb/tnt/CMakeLists.txt
+++ b/third_party/civetweb/tnt/CMakeLists.txt
@@ -27,11 +27,14 @@ add_definitions(-DUSE_WEBSOCKET)
 
 add_library(${TARGET} STATIC ${PRIVATE_HDRS} ${PUBLIC_HDRS} ${SRCS})
 
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER ThirdParty)
 
 target_link_libraries(${TARGET} ${CMAKE_DL_LIBS})
 
 target_compile_options(${TARGET} PRIVATE $<$<PLATFORM_ID:Linux>:-fPIC>)
 
-install(TARGETS ${TARGET} ARCHIVE DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
diff --git a/third_party/hat-trie/tnt/CMakeLists.txt b/third_party/hat-trie/tnt/CMakeLists.txt
index 9c812cc24..0cb89c319 100644
--- a/third_party/hat-trie/tnt/CMakeLists.txt
+++ b/third_party/hat-trie/tnt/CMakeLists.txt
@@ -18,6 +18,10 @@ set(PUBLIC_HDRS
 # ==================================================================================================
 include_directories(${OUR_DIR}/tsl)
 
-add_library(${TARGET} INTERFACE)
-target_sources(${TARGET} INTERFACE ${PUBLIC_HDRS})
-target_include_directories(${TARGET} INTERFACE ${OUR_DIR})
+add_library(${TARGET} INTERFACE ${PUBLIC_HDRS})
+target_include_directories(${TARGET} INTERFACE
+    $<BUILD_INTERFACE:${OUR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
+
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
diff --git a/third_party/imgui/tnt/CMakeLists.txt b/third_party/imgui/tnt/CMakeLists.txt
index 814ce0e1a..a0dd578cd 100644
--- a/third_party/imgui/tnt/CMakeLists.txt
+++ b/third_party/imgui/tnt/CMakeLists.txt
@@ -8,6 +8,7 @@ set(TARGET              imgui)
 set(SRC_DIR             ${OUR_DIR})
 set(PUBLIC_HDR_DIR      ${OUR_DIR})
 set(PRIVATE_HDR_DIR     ${OUR_DIR})
+set(BACKENDS_DIR        ${OUR_DIR}/backends)
 
 set(PUBLIC_HDRS
     ${PUBLIC_HDR_DIR}/imconfig.h
@@ -29,8 +30,25 @@ set(SRCS
     ${SRC_DIR}/imgui_widgets.cpp
 )
 
+set(BACKENDS
+    ${BACKENDS_DIR}/imgui_impl_metal.h
+    ${BACKENDS_DIR}/imgui_impl_metal.mm
+    ${BACKENDS_DIR}/imgui_impl_sdl.h
+    ${BACKENDS_DIR}/imgui_impl_sdl.cpp
+)
+
 add_library(${TARGET} STATIC ${PRIVATE_HDRS} ${PUBLIC_HDRS} ${SRCS})
 
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR} ${PRIVATE_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 
 set_target_properties(${TARGET} PROPERTIES FOLDER ThirdParty)
+
+# ==================================================================================================
+# Installation
+# ==================================================================================================
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
+install(FILES ${PUBLIC_HDRS} DESTINATION include)
+install(FILES ${BACKENDS} DESTINATION include/imgui/backends)
\ No newline at end of file
diff --git a/third_party/meshoptimizer/tnt/CMakeLists.txt b/third_party/meshoptimizer/tnt/CMakeLists.txt
index ae530b24e..d95717316 100644
--- a/third_party/meshoptimizer/tnt/CMakeLists.txt
+++ b/third_party/meshoptimizer/tnt/CMakeLists.txt
@@ -128,4 +128,4 @@ endif()
 # ==================================================================================================
 
 set(INSTALL_TYPE ARCHIVE)
-install(TARGETS meshoptimizer ${INSTALL_TYPE} DESTINATION lib/${DIST_DIR})
+install(TARGETS meshoptimizer EXPORT filamentTargets ${INSTALL_TYPE} DESTINATION lib)
diff --git a/third_party/robin-map/tnt/CMakeLists.txt b/third_party/robin-map/tnt/CMakeLists.txt
index 300da5248..b4c35d008 100644
--- a/third_party/robin-map/tnt/CMakeLists.txt
+++ b/third_party/robin-map/tnt/CMakeLists.txt
@@ -17,14 +17,16 @@ set(PUBLIC_HDRS
 # ==================================================================================================
 # Include and target definitions
 # ==================================================================================================
-include_directories(${OUR_DIR}/tsl)
 
-add_library(${TARGET} INTERFACE)
-target_sources(${TARGET} INTERFACE ${PUBLIC_HDRS})
-target_include_directories(${TARGET} INTERFACE ${OUR_DIR})
+add_library(${TARGET} INTERFACE ${PUBLIC_HDRS})
+target_include_directories(${TARGET} INTERFACE
+    $<BUILD_INTERFACE:${OUR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER ThirdParty)
 
 # ==================================================================================================
 # Installation
 # ==================================================================================================
 install(FILES ${PUBLIC_HDRS} DESTINATION include/${TARGET})
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
diff --git a/third_party/smol-v/tnt/CMakeLists.txt b/third_party/smol-v/tnt/CMakeLists.txt
index 4b245d450..fc4db9450 100644
--- a/third_party/smol-v/tnt/CMakeLists.txt
+++ b/third_party/smol-v/tnt/CMakeLists.txt
@@ -20,7 +20,10 @@ if (NOT MSVC)
     target_compile_options(${TARGET} PRIVATE -Wno-tautological-unsigned-enum-zero-compare)
 endif()
 
-target_include_directories(${TARGET} PUBLIC ${PUBLIC_HDR_DIR})
+target_include_directories(${TARGET} PUBLIC
+    $<BUILD_INTERFACE:${PUBLIC_HDR_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
 set_target_properties(${TARGET} PROPERTIES FOLDER ThirdParty)
 
-install(TARGETS ${TARGET} ARCHIVE DESTINATION lib/${DIST_DIR})
+install(TARGETS ${TARGET} EXPORT filamentTargets ARCHIVE DESTINATION lib)
diff --git a/tools/cmgen/CMakeLists.txt b/tools/cmgen/CMakeLists.txt
index f3d0eac56..b469aed84 100644
--- a/tools/cmgen/CMakeLists.txt
+++ b/tools/cmgen/CMakeLists.txt
@@ -55,7 +55,8 @@ install(TARGETS ${TARGET} RUNTIME DESTINATION bin)
 # Tests
 # ==================================================================================================
 if (NOT ANDROID)
+    find_package(GTest CONFIG REQUIRED)
     add_executable(test_${TARGET} tests/test_cmgen.cpp)
-    target_link_libraries(test_${TARGET} PRIVATE image imageio gtest)
+    target_link_libraries(test_${TARGET} PRIVATE image imageio GTest::gtest)
     set_target_properties(test_${TARGET} PROPERTIES FOLDER Tests)
 endif()
diff --git a/tools/filamesh/CMakeLists.txt b/tools/filamesh/CMakeLists.txt
index fa97069ae..c3c2733dd 100644
--- a/tools/filamesh/CMakeLists.txt
+++ b/tools/filamesh/CMakeLists.txt
@@ -18,7 +18,10 @@ add_executable(${TARGET} ${SRCS})
 
 target_link_libraries(${TARGET} PUBLIC math)
 target_link_libraries(${TARGET} PUBLIC utils)
-target_link_libraries(${TARGET} PUBLIC assimp)
+
+find_package(assimp CONFIG REQUIRED)
+target_link_libraries(${TARGET} PUBLIC assimp::assimp)
+
 target_link_libraries(${TARGET} PRIVATE getopt filameshio meshoptimizer)
 set_target_properties(${TARGET} PROPERTIES FOLDER Tools)
 
diff --git a/tools/glslminifier/CMakeLists.txt b/tools/glslminifier/CMakeLists.txt
index c278320c3..9263dfcdd 100644
--- a/tools/glslminifier/CMakeLists.txt
+++ b/tools/glslminifier/CMakeLists.txt
@@ -32,11 +32,12 @@ install(TARGETS ${TARGET} RUNTIME DESTINATION bin)
 # Tests
 # ==================================================================================================
 if (NOT ANDROID)
+    find_package(GTest CONFIG REQUIRED)
     add_executable(test_${TARGET}
             src/GlslMinify.cpp
             tests/test_glslminifier.cpp
     )
     target_include_directories(test_${TARGET} PRIVATE src)
-    target_link_libraries(test_${TARGET} PRIVATE gtest)
+    target_link_libraries(test_${TARGET} PRIVATE GTest::gtest)
     set_target_properties(test_${TARGET} PROPERTIES FOLDER Tests)
 endif()
diff --git a/tools/matc/CMakeLists.txt b/tools/matc/CMakeLists.txt
index 8199edc82..202230567 100644
--- a/tools/matc/CMakeLists.txt
+++ b/tools/matc/CMakeLists.txt
@@ -81,6 +81,8 @@ install(TARGETS ${TARGET} RUNTIME DESTINATION bin)
 # ==================================================================================================
 # Tests
 # ==================================================================================================
+find_package(GTest CONFIG REQUIRED)
+
 project(test_matc)
 set(TARGET test_matc)
 set(SRCS
@@ -93,6 +95,6 @@ set(SRCS
 
 add_executable(${TARGET} ${SRCS})
 
-target_link_libraries(${TARGET} matlang gtest)
+target_link_libraries(${TARGET} matlang GTest::gtest)
 
 set_target_properties(test_matc PROPERTIES FOLDER Tests)
diff --git a/web/samples/CMakeLists.txt b/web/samples/CMakeLists.txt
index 3be298aab..b0552381b 100644
--- a/web/samples/CMakeLists.txt
+++ b/web/samples/CMakeLists.txt
@@ -8,10 +8,6 @@ endif()
 set(SERVER_DIR ${PROJECT_BINARY_DIR})
 set(ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../..)
 
-if (CMAKE_CROSSCOMPILING)
-    include(${IMPORT_EXECUTABLES})
-endif()
-
 # ==================================================================================================
 # Build Materials.
 # ==================================================================================================
